-- Turning the server output on to display the output on the terminal.
SET SERVEROUTPUT ON;


Drop Table game_board;
  
Drop Table evaluate;

--Creating table game_board
CREATE TABLE game_board (
    R_ID Number(1) NOT NULL,
    C1  VARCHAR(1)  NOT NULL,
    C2  VARCHAR(1)  NOT NULL,
    C3  VARCHAR(1)  NOT NULL
);
--Adding constraints to the game_board table.

ALTER  TABLE game_board  ADD CONSTRAINT val_c CHECK (C1 IN ('X','O','_') AND C2 IN ('X','O','_') AND C3 IN ('X','O','_'));

--Inserting values into the game_board table

INSERT INTO game_board VALUES (1,'_','_','_');
INSERT INTO game_board VALUES (2,'_','_','_');
INSERT INTO game_board VALUES (3,'_','_','_');


--Creating table evaluate

CREATE TABLE evaluate (
R_ID NUMBER GENERATED ALWAYS AS IDENTITY START WITH 1 INCREMENT BY 1 MAXVALUE 2 ,
Val VARCHAR(3)
);

--Inserting value into the evaluate table

INSERT INTO evaluate(Val) VALUES('V');

CREATE OR REPLACE PROCEDURE ResetGame 
AS
BEGIN
    UPDATE game_board SET C1 = '_',C2 = '_',C3 = '_' WHERE R_ID IN ( 1, 2, 3 );
UPDATE evaluate SET Val = 'V';

END;
/

--Creating stored procedure game_play
CREATE OR REPLACE PROCEDURE game_play (SIGN IN VARCHAR2, RNo  NUMBER , CNo  NUMBER) 
AS 
  R1_1 game_board.C1%TYPE;
  R1_2 game_board.C2%TYPE;
  R1_3 game_board.C3%TYPE;
  
  R2_1 game_board.C1%TYPE;
  R2_2 game_board.C2%TYPE;
  R2_3 game_board.C3%TYPE;
  
  R3_1 game_board.C1%TYPE;
  R3_2 game_board.C2%TYPE;
  R3_3 game_board.C3%TYPE;

  TEMP VARCHAR(2);

  EVALUATE_VAR VARCHAR(2);
  
  INVALID_MOVE EXCEPTION;

  REPEATED_TURN EXCEPTION;
  
BEGIN

SELECT Val
INTO EVALUATE_VAR
FROM evaluate
WHERE R_ID = 1;

IF EVALUATE_VAR <> SIGN THEN
DBMS_OUTPUT.PUT_LINE('');
ELSE
RAISE REPEATED_TURN;
END IF;

IF CNo = 1 THEN 
    SELECT C1 INTO  TEMP
    FROM game_board
    WHERE R_ID = RNo;
ELSIF CNo = 2 THEN 
    SELECT C2 INTO  TEMP
    FROM game_board
    WHERE R_ID = RNo;
ELSIF CNo = 3 THEN
    SELECT C3 INTO  TEMP
    FROM game_board
    WHERE R_ID = RNo;

END IF;

IF TEMP = '_' THEN 
                            
             IF CNo = 1 THEN
					UPDATE evaluate SET Val = SIGN WHERE R_ID = 1 ;
					UPDATE game_board SET C1 = SIGN WHERE R_ID = RNo;
					
					FOR obj IN (SELECT * FROM game_board)
					LOOP 
					DBMS_OUTPUT.PUT_LINE(obj.C1||' | '||obj.C2||' | '||obj.C3);
					END LOOP;
				
			ELSIF CNo = 2 THEN
					UPDATE evaluate SET Val = SIGN WHERE R_ID =1 ;
					UPDATE game_board SET C2 = SIGN WHERE R_ID = RNo;
					
					FOR obj IN (SELECT * FROM game_board)
					LOOP 
					DBMS_OUTPUT.PUT_LINE(obj.C1||' | '||obj.C2||' | '||obj.C3);
					END LOOP;
				
			ELSIF CNo = 3 THEN
					UPDATE evaluate SET Val = SIGN WHERE R_ID =1 ;
					UPDATE game_board SET C3 = SIGN WHERE R_ID = RNo;
					
					FOR obj IN (SELECT * FROM game_board)
					LOOP 
					DBMS_OUTPUT.PUT_LINE(obj.C1||' | '||obj.C2||' | '||obj.C3);
					END LOOP;
				ELSE
				DBMS_OUTPUT.PUT_LINE('Nothing Changed');
		   
				COMMIT;
            END IF;
			

            SELECT C1, C2, C3 INTO R1_1,R1_2,R1_3 FROM game_board 
            WHERE R_ID = 1;     
              
            SELECT C1, C2, C3 INTO R2_1,R2_2,R2_3 FROM game_board
            WHERE R_ID = 2;
        
            SELECT C1, C2, C3 INTO R3_1,R3_2,R3_3 FROM game_board
            WHERE R_ID = 3;
			
			IF (R1_1 = R1_2 AND R1_2 = R1_3 AND R1_1 <> '_' ) THEN
              DBMS_OUTPUT.PUT_LINE('Player '|| R1_1 || ' IS THE WINNER');
              
            ELSIF (R2_1=R2_2 AND R2_2=R2_3 AND R2_1 <> '_' ) THEN
              DBMS_OUTPUT.PUT_LINE('Player '|| R2_1 || ' IS THE WINNER');
              
            ELSIF (R3_1=R3_2 AND R3_2=R3_3 AND R3_1 <> '_'  ) THEN
            DBMS_OUTPUT.PUT_LINE('Player '|| R3_1 || ' IS THE WINNER');
              
            ELSIF (R1_1 = R2_1 AND R2_1 = R3_1 AND R1_1 <> '_' ) THEN
              DBMS_OUTPUT.PUT_LINE('Player '|| R1_1 || ' IS THE WINNER');
              
            ELSIF (R1_2 = R2_2 AND R2_2 = R3_2 AND R1_2 <> '_' ) THEN
              DBMS_OUTPUT.PUT_LINE('Player '|| R1_2 || ' IS THE WINNER');
              
            ELSIF (R1_3 = R2_3 AND R2_3 = R3_3 AND R1_3 <> '_'  )THEN
              DBMS_OUTPUT.PUT_LINE('Player '|| R1_3 || ' IS THE WINNER');
              
            ELSIF (R1_1 = R2_2 AND R2_2 = R3_3 AND R1_1 <> '_'  ) THEN
              DBMS_OUTPUT.PUT_LINE('Player '|| R1_1 || ' IS THE WINNER');
              
            ELSIF (R1_3 = R2_2 AND R2_2 = R3_1 AND R1_3 <> '_'  )THEN
              DBMS_OUTPUT.PUT_LINE('Player '|| R1_3 || ' IS THE WINNER');
              
            ELSIF (R1_1 = '_' OR R1_2 = '_' OR R1_3 = '_' OR R2_1 = '_' OR R2_2 = '_' OR R2_3 = '_' OR R3_1 = '_' OR R3_2 = '_' OR R3_3 = '_') THEN
              DBMS_OUTPUT.PUT_LINE('Continue Playing');
              
            ELSE 
              DBMS_OUTPUT.PUT_LINE('Player X And Player O Match Draw');
            END IF;
ELSE
    RAISE INVALID_MOVE;
END IF ;

EXCEPTION

  WHEN INVALID_MOVE THEN 
  DBMS_OUTPUT.PUT_LINE('Invalid Move');
  
  WHEN REPEATED_TURN THEN
  DBMS_OUTPUT.PUT_LINE('Next Player Chance');
  
  WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('Error Found. Check the value entered');
  
END;			
/

--Test Case 1
--PLayer X wins
EXEC game_play('X',2,3);
EXEC game_play('O',1,1);
EXEC game_play('X',3,3);
EXEC game_play('O',2,1);
EXEC game_play('X',1,3);

--Test Case 2
--Same Player plays again
EXEC Resetgame();
EXEC game_play('X',2,3);
EXEC game_play('X',1,1);

--Test Case 3
--Draw
EXEC Resetgame();
EXEC game_play('X',2,3);
EXEC game_play('O',1,1);
EXEC game_play('X',3,3);
EXEC game_play('O',2,1);
EXEC game_play('X',1,2);
EXEC game_play('O',1,3);
EXEC game_play('X',2,2);
EXEC game_play('O',3,2);
EXEC game_play('X',3,1);

--Test Case 4
-- Wrong input
EXEC Resetgame();
EXEC game_play('X',2,2);
EXEC game_play('O',3,2);
EXEC game_play('A',3,1);

--Test Case 5 
--Trying to input in occupied position
EXEC Resetgame();
EXEC game_play('X',2,2);
EXEC game_play('O',2,2);