DROP TABLE game_board;

DROP TABLE evaluate;

CREATE TABLE game_board (
R_ID NUMBER ,
C1 VARCHAR(3) CHECK (C1 IN ('X','O','_')) ,
C2 VARCHAR(3) CHECK (C2 IN ('X','O','_')) ,
C3 VARCHAR(3) CHECK (C3 IN ('X','O','_'))
);

INSERT INTO game_board VALUES(1,'_','_','_');
INSERT INTO game_board VALUES(2,'_','_','_');
INSERT INTO game_board VALUES(3,'_','_','_');

CREATE TABLE evaluate (
R_ID NUMBER GENERATED ALWAYS AS IDENTITY START WITH 1 INCREMENT BY 1 MAXVALUE 2 ,
Val VARCHAR(3) 
);

INSERT INTO evaluate(Val) VALUES('V');

CREATE OR REPLACE PROCEDURE game_play(Move IN VARCHAR2, R_No  NUMBER , C_No  NUMBER) 
AS 
  R1_1 game_board.C1%TYPE;
  R1_2 game_board.C2%TYPE;
  R1_3 game_board.C3%TYPE;
  
  R2_1 game_board.C1%TYPE;
  R2_2 game_board.C2%TYPE;
  R2_3 game_board.C3%TYPE;
  
  R3_1 game_board.C1%TYPE;
  R3_2 game_board.C2%TYPE;
  R3_3 game_board.C3%TYPE;
  
  CHECKER VARCHAR(2);
  ANOTHER_POSITION EXCEPTION;
  evaluate_VARIABLE VARCHAR(2);
  SAME_PLAYER EXCEPTION;
 
BEGIN

SELECT Val
INTO evaluate_VARIABLE
FROM evaluate
WHERE R_ID = 1;

IF evaluate_VARIABLE <> Move THEN
DBMS_OUTPUT.PUT_LINE('');
ELSE
RAISE SAME_PLAYER;
END IF;

IF C_No = 1 THEN 
    SELECT C1 
    INTO CHECKER 
    FROM game_board
    WHERE R_ID = R_No;
    
ELSIF C_No = 2 THEN
    SELECT C2 
    INTO CHECKER 
    FROM game_board
    WHERE R_ID = R_No;

ELSIF C_No = 3 THEN
    SELECT C3 
    INTO CHECKER 
    FROM game_board
    WHERE R_ID = R_No;

END IF;
    
IF CHECKER = '_' THEN 
    
            
            
            IF C_No =1 THEN 
            UPDATE evaluate SET Val = Move WHERE R_ID =1 ;
            UPDATE game_board SET C1 = Move WHERE R_ID = R_No ;
            
            FOR obj IN (SELECT * FROM game_board) LOOP 
            DBMS_OUTPUT.PUT_LINE(obj.C1||' | '||obj.C2||' | '||obj.C3);
            END LOOP;
            
            ELSIF C_No = 2 THEN 
            UPDATE evaluate SET Val = Move WHERE R_ID =1 ;
            UPDATE game_board SET C2 = Move WHERE R_ID = R_No;
            
            FOR obj IN (SELECT * FROM game_board) LOOP 
            DBMS_OUTPUT.PUT_LINE(obj.C1||' | '||obj.C2||' | '||obj.C3);
            END LOOP;
            
            ELSIF C_No = 3 THEN 
            UPDATE evaluate SET Val = Move WHERE R_ID =1;
            UPDATE game_board SET C3 = Move WHERE R_ID = R_No;
            
           FOR obj IN (SELECT * FROM game_board) LOOP 
            DBMS_OUTPUT.PUT_LINE(obj.C1||' | '||obj.C2||' | '||obj.C3);
            END LOOP;

            ELSE
            DBMS_OUTPUT.PUT_LINE('NO UPDATE');
            
            COMMIT;
            END IF;
  
              
              SELECT C1, C2, C3 INTO R1_1,R1_2,R1_3
              FROM game_board
              WHERE R_ID = 1;
             
         
              SELECT C1, C2, C3 INTO R2_1,R2_2,R2_3
              FROM game_board
              WHERE R_ID = 2 ;
              
               
              SELECT C1, C2, C3 INTO R3_1,R3_2,R3_3
              FROM game_board
              WHERE R_ID = 3 ;
              
              IF (R1_1 = R1_2 AND R1_2 = R1_3 AND R1_1 <>'_') THEN
              DBMS_OUTPUT.PUT_LINE(R1_1 || ' HAS WON');
              
              ELSIF (R2_1=R2_2 AND R2_2=R2_3 AND R2_1 <>'_') THEN
              DBMS_OUTPUT.PUT_LINE(R2_1 || ' HAS WON');
              
              ELSIF (R3_1=R3_2 AND R3_2=R3_3 AND R3_1<>'_' ) THEN
              DBMS_OUTPUT.PUT_LINE(R3_1 || ' HAS WON');
              
              ELSIF (R1_1 = R2_1 AND R2_1 = R3_1 AND R1_1<>'_') THEN
              DBMS_OUTPUT.PUT_LINE(R1_1 || ' HAS WON');
              
              ELSIF (R1_2 = R2_2 AND R2_2 = R3_2 AND R1_2<>'_') THEN
              DBMS_OUTPUT.PUT_LINE(2 || ' HAS WON');
              
              ELSIF (R1_3 = R2_3 AND R2_3 = R3_3 AND R1_3<>'_')THEN
              DBMS_OUTPUT.PUT_LINE(R1_3 || ' HAS WON');
              
              ELSIF (R1_1 = R2_2 AND R2_2 = R3_3 AND R1_1<>'_') THEN
              DBMS_OUTPUT.PUT_LINE(R1_1 || ' HAS WON');
              
              ELSIF (R1_3 = R2_2 AND R2_2 = R3_1 AND R1_3<>'_')THEN
              DBMS_OUTPUT.PUT_LINE(R1_3 || ' HAS WON');
              
              ELSIF
              (R1_1 = '_' OR R1_2 = '_' OR R1_3 = '_' OR R2_1 = '_' OR R2_2 = '_' OR R2_3 = '_' OR R3_1 = '_' OR R3_2 = '_' OR R3_3 = '_')
              THEN
              DBMS_OUTPUT.PUT_LINE('NOT FINISHED');
              
              ELSE 
              DBMS_OUTPUT.PUT_LINE('MATCH DRAW');
              END IF;
    
ELSE
    RAISE ANOTHER_POSITION;
    
END IF ;

EXCEPTION

  WHEN ANOTHER_POSITION THEN 
  DBMS_OUTPUT.PUT_LINE('PLEASE SELECT ANOTHER POSTION');
  
  WHEN SAME_PLAYER THEN
  DBMS_OUTPUT.PUT_LINE('SAME PLAYER TRYING TO PLAY');

END;
/
--Test Case 1
--PLayer X wins
EXEC game_play('X',2,3);
EXEC game_play('O',1,1);
EXEC game_play('X',3,3);
EXEC game_play('O',2,1);
EXEC game_play('X',1,3);

--Test Case 2
--Same Player plays again

--EXEC game_play('X',2,3);
--EXEC game_play('X',1,1);

--Please Comment the test case no in use and uncomment the test case to be executed